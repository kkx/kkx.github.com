<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[名字]]></title>
  <link href="http://kkx.github.com/atom.xml" rel="self"/>
  <link href="http://kkx.github.com/"/>
  <updated>2012-05-04T19:17:58-07:00</updated>
  <id>http://kkx.github.com/</id>
  <author>
    <name><![CDATA[小逸]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[numpy和matlab之间的数据交互]]></title>
    <link href="http://kkx.github.com/blog/2012/05/04/numpyhe-matlabzhi-jian-de-shu-ju-jiao-hu/"/>
    <updated>2012-05-04T18:03:00-07:00</updated>
    <id>http://kkx.github.com/blog/2012/05/04/numpyhe-matlabzhi-jian-de-shu-ju-jiao-hu</id>
    <content type="html"><![CDATA[<p>要让matlab把数据倒入倒python里很简单, 我试过直接保存倒2进制的文件里，但是通过用scipy.io.loadmat 这个方法读取的时候会报错。结果职能用粗糙的办法了，把文件存放在一个可读文件里:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>save -ascii "your.txt" yourMatrix </span></code></pre></td></tr></table></div></figure>


<p>在python里读取的时候用genfromtxt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from numpy import genfromtxt
</span><span class='line'>m = genfromtxt('your.txt') </span></code></pre></td></tr></table></div></figure>


<p>想通过python把array寸在一个matlab能读取的文件里的方法也很简单:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from numpy import savetxt
</span><span class='line'>savetxt("your.txt", yourArray)</span></code></pre></td></tr></table></div></figure>


<p>在matlab里直接load就行了:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>load -ascii your.txt newMatrixName</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用nohup后台运行,用python 发提醒邮件]]></title>
    <link href="http://kkx.github.com/blog/2012/04/29/yong-python-fa-ti-xing-you-jian/"/>
    <updated>2012-04-29T01:09:00-07:00</updated>
    <id>http://kkx.github.com/blog/2012/04/29/yong-python-fa-ti-xing-you-jian</id>
    <content type="html"><![CDATA[<p>最近在学校的n电脑上跑数据，很多时候一个run要耗费好几个小时，ssh不知道为什么连一会后会自动断开，跑到一半程序就悲剧了。
在网上找了一会 发现一个神器:nohup, 用法超级简单: nohup comand
这样你的程序会后台运行，并且就算你ssh断开后都能继续跑着。nohup还提供给你一个nohup.log 你程序所有的output都会放在那个log里。</p>

<p>另外一个碰到的问题是，很多时候离开ssh后我都不知道程序跑完没，这里我用python搞了一个小程序:基于smtp发电子邮件。首先我用python的subprocess去跑数据程序，然后当数据程序跑完后发送一个邮件到我的邮箱里，这样我就能差不多“实时”的知道程序运行的情况了。</p>

<p>这是我发送邮件的小函数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env python
</span><span class='line'># -*- coding: utf8 -*-
</span><span class='line'>import smtplib
</span><span class='line'>from email.mime.text import MIMEText
</span><span class='line'>
</span><span class='line'>server = "smtp.gmail.com:587"
</span><span class='line'>user_account="pythonsmtpalert@gmail.com"
</span><span class='line'>password="密码"
</span><span class='line'>mailto_list=["我的目标邮箱.com"]
</span><span class='line'>def send_mail(to_list,sub,content):
</span><span class='line'>        me="python stmp alert " +"&lt;pythonsmtpalert@gmail.com&gt;"
</span><span class='line'>        msg = MIMEText(content)
</span><span class='line'>        msg['Subject'] = sub
</span><span class='line'>        msg['From'] = me
</span><span class='line'>        msg['To'] = ";".join(mailto_list)
</span><span class='line'>        try:
</span><span class='line'>            s = smtplib.SMTP(server)
</span><span class='line'>            s.starttls()  
</span><span class='line'>            s.login(user_account,password)
</span><span class='line'>            s.sendmail(me, to_list, msg.as_string())
</span><span class='line'>            s.close()
</span><span class='line'>            return True
</span><span class='line'>        except Exception, e:
</span><span class='line'>            print str(e)
</span><span class='line'>            return False
</span><span class='line'>
</span><span class='line'>if __name__ == '__main__':
</span><span class='line'>    if send_mail(mailto_list,"Process accomplished","t你好ake a look the results!"):
</span><span class='line'>        print "发送成功"
</span><span class='line'>    else:
</span><span class='line'>        print "发送失败"</span></code></pre></td></tr></table></div></figure>


<p>server: 服务器地址
user_account:你的邮箱帐号
password:邮箱密码
mailto_list:目标邮箱
这里你的邮箱要和你服务器地址是一个牌子的，我这里用的是gmail，换别的邮箱的话得用别得邮箱得smtp服务器</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[根据bag of keypoints图片分类]]></title>
    <link href="http://kkx.github.com/blog/2012/04/20/gen-ju-bag-of-keypointstu-pian-fen-lei/"/>
    <updated>2012-04-20T02:41:00-07:00</updated>
    <id>http://kkx.github.com/blog/2012/04/20/gen-ju-bag-of-keypointstu-pian-fen-lei</id>
    <content type="html"><![CDATA[<p>最近看了一篇名叫<a href="http://www.xrce.xerox.com/index.php/content/download/16612/118527/file/willamowski.pdf">Categorizing nine visual classes using local appearance descriptors</a> 的论文，相当受启发，该论文以Information retrieval里<a href="http://en.wikipedia.org/wiki/Bag_of_words_model">bag of words</a>(以单词的出现的次数的矩阵来概括某篇文章)为基础,通过对图像所有的interest points用<a href="http://en.wikipedia.org/wiki/Harris_affine_region_detector">harris affine detector</a>来
产生一个bag of keypoints(用sift descriptor描述每个keypoints) 对图像进行描述。</p>

<p>不过一套训练数据里所有的keypoints的数量是相当大的，这里论文的另外一个看点就是用k-means对所有的keypoints进行归类，每个cluster之中保含类似的keypoints，而这时，每个图像里的keypoints 在每个cluster里的出现次数将会给统计并且生成一个bag of keypoints.</p>

<p>通过naive bayes或svm 进行训练，在论文里分类的结果还不错.
有几个我觉得也许可以改进的地方:</p>

<blockquote><p>  1 在原论文里：每种图像生成的keypoints的数量是不同的，为了避免bias作者在clustering的时候在每类图像里随机选了5000个keypoints，我觉得如果选的时候可以把stop words的概念加进去，每个class都有的keypoint去除掉的话应该能增加discrimination.</p>

<p>  2 在测试的时候我觉得如果一个keypoint离2个以上的cluster距离都差不多的话，应该可以把它当作IR里的‘生词’一样忽略掉.
感觉以上这两点应该能对算法有一个改进，以后有空得研究下。</p></blockquote>

<p>还有在论文里作者在做测试的时候没有使用no-object的图像进行训练和测试，我觉得如果加进去的话，结果应该会差一个档次。</p>

<p>参考:
http://en.wikipedia.org/wiki/Bag_of_words_model_in_computer_vision.</p>

<p>这里是<a href="http://videolectures.net/lmcv04_dance_vcbk/">作者介绍算法的视频</a>,解释的相当不错，不过好像视频后半部分看不了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://kkx.github.com/blog/2012/04/15/hello-world/"/>
    <updated>2012-04-15T17:28:00-07:00</updated>
    <id>http://kkx.github.com/blog/2012/04/15/hello-world</id>
    <content type="html"><![CDATA[<p>HELLO WORLD!!!!</p>
]]></content>
  </entry>
  
</feed>
